Team Gnocchi -- Hugo Jenkins (Boary), Ryan Lau (Jon), and Brian Kang (Vivian)
APCS pd6
L06 -- Read/Review/Expand
2022-02-11f
time spent: .5hrs

ACTIVITY 1

1a. public static double sentimentVal(String)

1b. Yes, it requires a String parameter. If you pass a different type of parameter, the compiler will return a error saying that the different type cannot be converted to a String:

ReviewDriver.java:4: error: incompatible types: int cannot be converted to String

1c. This method returns a double.

2.

Method Call           | Return Value
=====================================
sentimentVal("hello") | 0.75
sentimentVal("bob")   | -0.16
sentimentVal("ryan")  | 0.04

3a. This will compile because sentimentVal was called with a single String parameter and the return type is a double which matches the signature of sentimentVal.

3b. This will not compile because sentimentVal was called with a double parameter and the return type is a String which does not match the signature of sentimentVal.

3c. This will not compile because sentimentVal was called with a two String parameters which does not match the signature of sentimentVal.


ACTIVITY 2

4. The totalSentiment method works by iterating over each word, removing the punctuation, and then looking up the sentiment value of the word with sentimentVal and adding the value to a total variable. We return this variable at the end of the method

5a. Yes because the greater the total sentiment value, the more stars the review gets.

5b. Neutral (zero sentiment value) ratings will receive a star rating of 2 and negative ratings will receive a star rating of 1 or 0. This is because currently negative ratings will get the same star rating of 1 as ratings with sentiment values up to 5. We will also make sure that any positive total sentiment value ratings will recieve a 3 or 4 stars.

6a. The logical error is that totalSentiment that is less than 15 will get 4 stars and any review with a totalSentiment that is equal to or greater than 15 will get 0 stars.
    For example, a review with a totalSentiment value of 20 will get 0 stars where a totalSentiment value of -5 will get 4 stars.

6b. We can fix it by reversing the order of the boolean expressions.


ACTIVITY 3

3. indexOf returns the index of the first occurence of the inputted String on the String it was called on. substring returns the part of the String it was called on that is within the integer indexes provided to the method. You should add 1 to the position of the space when copying the remainder of the string because we don't want the space itself.

5. You do not need to create an instance of a Review class to be able to use the static methods within Review. Non-static methods must be called on an instance of the class.

6. Instead of calling randomAdjective(), we can either call randomPositiveAdj() or randomNegativeAdj() within fakeReview.


ACTIVITY 4

1. You want to be able to communicate your negative feelings but you do not want to bother to write a review.

2. You want to be able to communicate your positive feelings but you do not want to bother to write a review.

3. In the file which contains the original review, instead of putting stars in front of the adjectives which you want to be replaced, put a plus (for a positive adjective) or a minus (for a negative adjective).

5. It will remove the first letter of oneWord.

6. It was necessary to do this because if you look up a word with the symbol in the hasMap, there won't be a value tied to the word since symbols are not included in it.

7. After we take the random positive adjective, we would make sure that it had a sentiment value over 2.0.


ACTIVITY 5

1. We chose to implement this program because we remembered this type of code from intro, the process utilized all the proper requirements and it was a topic that interested us the most at the moment.

2. First, we thought of what type of program to implement. Then, we identified what we should apply to the texts, which is the number of times each word appears in the text selected. Then, using the ctrl f keys, we made sure that the most common words followed with our results.

3. public static String getMostCommonWord(String fileName)

The parameters for this method was based off of totalSentiment since we wanted to read in a file by providing the filename as a String and then processing the text in that file similar to how totalSentiment worked.

It is static since there is no need to create an instance of the class to use this method.

4.
for (String word : text.split(SPACE))
text.split(SPACE) returns an array of Strings that were seperated by spaces in text.

word = word.toLowerCase();
word.toLowerCase() returns the word but makes it all lowercase.

5.

6.
Original Code using for loop:
for (String word : text.split(SPACE)) {
    word = removePunctuation(word);
    word = word.toLowerCase();

    if (wordCounts.get(word) == null) {
        wordCounts.put(word, 1);
    } else {
        wordCounts.put(word, wordCounts.get(word) + 1);
    }

    // check if this word is now the most common word
    if (wordCounts.get(word) > wordCounts.get(mostCommonWord)) {
        mostCommonWord = word;
    }
}

New code using while loop:

int counter = 0;
String words = text.split(SPACE);

while (counter < words.length) {
    word = words[counter];
    word = removePunctuation(word);
    word = word.toLowerCase();

    if (wordCounts.get(word) == null) {
        wordCounts.put(word, 1);
    } else {
        wordCounts.put(word, wordCounts.get(word) + 1);
    }

    // check if this word is now the most common word
    if (wordCounts.get(word) > wordCounts.get(mostCommonWord)) {
        mostCommonWord = word;
    }
    counter++;
}
